version: 2.1
orbs:
  slack: circleci/slack@4.1
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      stack:
        default: backend
        type: string   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            if(<<parameters.stack>>=="frontend");
            then
              aws s3 rm s3://"udapeople-${CIRCLE_WORKFLOW_ID}" --recursive
            fi
            aws cloudformation delete-stack --stack-name <<parameters.stack>>-${CIRCLE_WORKFLOW_ID} 

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl -H "token: ba893121-109f-4cad-ad93-13a7b46c4149" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID})
            if(( $SUCCESS=="failure" )); 
            then
             cd backend
             npm install
             npm run migrations:revert
            fi

  send-slack-fail:
    description: Send a slack notification in case of failure
    steps:
      - slack/notify:
          event: fail
          template: basic_fail_1
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm i
            npm run build
      - send-slack-fail
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            # Your code here
            cd backend
            npm i
            npm run build
      - send-slack-fail
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: front-end test
          command: |
            # Your code here
            cd frontend
            npm i
            npm run test
      - send-slack-fail
                
  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end test
          command: |
            # Your code here
            cd backend
            npm i
            npm run test
      - send-slack-fail
            
  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: "scan frontend"
          command: |
            cd frontend
            npm i
            npm audit --audit-level=critical
      - send-slack-fail
     

  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: "scan backend"
          command: |
            cd backend
            npm i
            npm audit --audit-level=critical
      - send-slack-fail

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "backend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "frontend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            yum install -y tar
            yum install -y gzip
            URL=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" --output text)
            echo ${URL} >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
            echo "$URL"
            curl -H "Content-Type: text/plain" -H "token: ba893121-109f-4cad-ad93-13a7b46c4149" --request PUT --data "${URL}" https://api.memstash.io/values/backend_${CIRCLE_WORKFLOW_ID}
     
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
      - send-slack-fail
      - destroy-environment:
          stack: "frontend" 
      - destroy-environment:
          stack: "backend"     

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["20:3c:61:cb:f4:9b:41:ae:74:dd:02:0a:d5:ee:0e:53"]
      # attach workspace
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            # Your code here
            apk add --update ansible
            apk add curl
            apk add --upgrade jq
            pip3 install awscli
      - run:
          name: Configure server
          no_output_timeout: 30m
          command: |
            # Your code here
            cat .circleci/ansible/inventory.txt
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml 
      - send-slack-fail 
      - destroy-environment:
          stack: "frontend" 
      - destroy-environment:
          stack: "backend"  
       

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    # environment:
    #   TYPEORM_MIGRATIONS_DIR: $TYPEORM_MIGRATIONS_DIR
    #   ENVIRONMENT: $ENVIRONMENT
    #   TYPEORM_CONNECTION: $TYPEORM_CONNECTION
    #   TYPEORM_MIGRATIONS: $TYPEORM_MIGRATIONS 
    #   TYPEORM_HOST: $TYPEORM_HOST
    #   TYPEORM_PORT: $TYPEORM_PORT
    #   TYPEORM_USERNAME: $TYPEORM_USERNAME
    #   TYPEORM_PASSWORD: $TYPEORM_PASSWORD
    #   TYPEORM_DATABASE: $TYPEORM_DATABASE
    #   TYPEORM_ENTITIES: $TYPEORM_ENTITIES
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: npm i curl
      - run:
          name: create .env file
          command: |
            cd backend
            echo ENVIRONMENT=$ENVIRONMENT > .env
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR > .env
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> .env
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> .env
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> .env
            echo TYPEORM_HOST=$TYPEORM_HOST >> .env
            echo TYPEORM_PORT=$TYPEORM_PORT >> .env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> .env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> .env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> .env
            cat .env

      - run:
          name: Run migrations
          command: |
            cd backend
            npm i
            npm run migrations > migration-result.txt
            cat migration-result.txt
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            cd backend
            if grep -i successfully migration-result.txt; then
              echo "migration success"
              curl -H "Content-Type: text/plain" -H "token: ba893121-109f-4cad-ad93-13a7b46c4149" --request PUT --data "success" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
            else
              echo "no migrations are pending"
              curl -H "Content-Type: text/plain" -H "token: ba893121-109f-4cad-ad93-13a7b46c4149" --request PUT --data "no-migrations" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
            fi      
     # Here's where you will add some code to rollback on failure
      - revert-migrations
      # - destroy-environment:
      #     stack: "frontend" 
      # - destroy-environment:
      #     stack: "backend" 
         

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            yum install -y tar
            yum install -y gzip
            yum install -y jq
            curl -sL https://rpm.nodesource.com/setup_14.x | bash -
            yum install -y nodejs
            cd frontend
            npm i
      - run:
          name: Get backend url
          command: |
            # your code here
            # BACKEND_IP=$(curl -H "token: ba893121-109f-4cad-ad93-13a7b46c4149" --request GET https://api.memstash.io/values/backend_${CIRCLE_WORKFLOW_ID})
            # export API_URL="http://${BACKEND_IP}:3030"
            # echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            BACKEND_IP=$(curl -H "token: ba893121-109f-4cad-ad93-13a7b46c4149" --request GET https://api.memstash.io/values/backend_${CIRCLE_WORKFLOW_ID})
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            cd frontend
            npm run build
            cd dist
            aws s3 sync . s3://"udapeople-${CIRCLE_WORKFLOW_ID}" --delete
      # Here's where you will add some code to rollback on failure
      - revert-migrations
      - send-slack-fail
      - destroy-environment:
          stack: "frontend" 
      - destroy-environment:
          stack: "backend"           
                    
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["20:3c:61:cb:f4:9b:41:ae:74:dd:02:0a:d5:ee:0e:53"]
      # attach workspace
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            # Your code here
            pip3 install awscli
            apk add --update ansible
            apk add curl
            apk add --upgrade rsync
            apk add --update npm
            apk add tar
            apk add gzip
            apk add jq
            npm install typescript -g 
      - run:
          name: create env file
          command: |
            cd backend
            echo ENVIRONMENT=$ENVIRONMENT > .env
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR > .env
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> .env
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> .env
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> .env
            echo TYPEORM_HOST=$TYPEORM_HOST >> .env
            echo TYPEORM_PORT=$TYPEORM_PORT >> .env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> .env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> .env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> .env
            cat .env

      - run:
          no_output_timeout: 160m
          name: Deploy backend
          command: |
            # your code here
            cd backend
            npm i
            npm run build
            tar --exclude='./node_modules' -zcvf ../backend.tar.gz .
            # rsync -a dist/ ../.circleci/ansible/roles/deploy/files/web
            ansible-playbook -i ../.circleci/ansible/inventory.txt ../.circleci/ansible/deploy-backend.yml

      # Here's where you will add some code to rollback on failure 
      - revert-migrations
      - send-slack-fail
      - destroy-environment:
          stack: "frontend" 
      - destroy-environment:
          stack: "backend"  

  smoke-test:
    docker:
      # Lightweight Docker image 
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update npm
            apk add curl
            apk add jq
            apk add tar
            apk add gzip
            pip3 install awscli
      - run:
          name: Backend smoke test.
          command: |
            # your code here
            BACKEND_IP=$(curl -H "token: ba893121-109f-4cad-ad93-13a7b46c4149" --request GET https://api.memstash.io/values/backend_${CIRCLE_WORKFLOW_ID})
            echo $BACKEND_IP
            curl "http://${BACKEND_IP}:3030"
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website.eu-central-1.amazonaws.com"
            if curl -s ${URL} | grep "Welcome"
            then
            return 0
            else
            return 1
            fi
      # Here's where you will add some code to rollback on failure 
      - revert-migrations
      - send-slack-fail
      - destroy-environment:
          stack: "frontend" 
      - destroy-environment:
          stack: "backend" 

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            yum install -y tar
            yum install -y gzip
            yum install -y jq
            curl -sL https://rpm.nodesource.com/setup_14.x | bash -
            yum install -y nodejs
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --tags project=udapeople \
              --stack-name "udapeople" \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID}" 
      # Here's where you will add some code to rollback on failure  
      - revert-migrations
      - send-slack-fail
      - destroy-environment:
          stack: "frontend" 
      - destroy-environment:
          stack: "backend" 

  cleanup:
      docker:
        # Docker image here
        - image: amazon/aws-cli
      steps:
        # Checkout code from git
        - checkout
        - run:
            name: Install dependencies
            command: |
              # your code here
              yum install -y tar
              yum install -y gzip
              yum install -y jq
              curl -sL https://rpm.nodesource.com/setup_14.x | bash -
              yum install -y nodejs
        - run:
            name: Get old stack workflow id
            command: |
              # your code here
              # export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)
              # export STACKS=$(aws cloudformation list-stacks --query "StackSummaries[*].StackName" --stack-status-filter CREATE_COMPLETE --no-paginate --output text)
        - run:
            name: Remove old stacks and files
            command: |
              OldWorkflowID=$(curl -H "token: ba893121-109f-4cad-ad93-13a7b46c4149" --request GET https://api.memstash.io/values/old-workflow-id)
              echo ${OldWorkflowID}
              aws cloudformation delete-stack --stack-name "backend-${OldWorkflowID}"
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "frontend-${OldWorkflowID}"
        - run:
            name: Roll back cloud front
            when: on_fail
            command: | 
              oldCloudFront=$(curl -H "token: ba893121-109f-4cad-ad93-13a7b46c4149" --request GET https://api.memstash.io/values/old-workflow-id)
              aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --tags project=udapeople \
              --stack-name "udapeople" \
              --parameter-overrides WorkflowID="${oldCloudFront}"
        - run:
            name: set old workflow ID
            when: on_success
            command: |
              curl -H "Content-Type: text/plain" -H "token: ba893121-109f-4cad-ad93-13a7b46c4149" --request PUT --data "${CIRCLE_WORKFLOW_ID}" https://api.memstash.io/values/old-workflow-id
        - revert-migrations
        - send-slack-fail
        - destroy-environment:
            stack: "frontend" 
        - destroy-environment:
            stack: "backend"

            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]